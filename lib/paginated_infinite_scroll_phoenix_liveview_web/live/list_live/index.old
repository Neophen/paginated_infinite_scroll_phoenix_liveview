defmodule PaginatedInfiniteScrollPhoenixLiveviewWeb.ListLive.Index do
  use PaginatedInfiniteScrollPhoenixLiveviewWeb, :live_view

  @per_page 28
  @posts Enum.map(1..1000, fn i ->
           %{
             id: i,
             title: "Post #{i}",
             page: div(i - 1, @per_page) + 1,
             content: "Some content #{i}",
             price: i,
             tax: 20
           }
         end)
  @container_id "posts-container"

  def render(assigns) do
    ~H"""
    <div class="bg-white p-4">
      <%!-- <div id="scroll-tracking" data-container-id={@container_id} phx-hook="InfiniteScrollTrack" /> --%>
      <span class="min-w-[65px] fixed right-2 bottom-2 z-50 rounded-lg bg-zinc-900 p-3 text-center text-3xl text-white opacity-80">
        <span class="text-sm">pg</span>
        <%= @page %>
      </span>
      <div
        id={@container_id}
        phx-update="stream"
        phx-viewport-top={@page > 1 && "prev-page"}
        phx-viewport-bottom={!@end_of_timeline? && "next-page"}
        phx-page-loading
        data-end={@end_of_timeline?}
        data-first={@page == 1}
        class="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-4 pb-[calc(200vh)] pt-[calc(200vh)] data-[end]:pb-0 data-[first]:pt-0"
      >
        <.product_card :for={{dom_id, entry} <- @streams.posts} id={dom_id} product={entry} />
      </div>
      <div :if={@end_of_timeline?} class="text-3xl font-bold mt-10 text-center">
        ðŸŽ‰ You made it to the beginning of time ðŸŽ‰
      </div>
    </div>
    """
  end

  def handle_params(params, _url, socket) do
    page_params = params["page"] || "1-1"

    [page_start, page_end] =
      page_params
      |> String.split("-")
      |> Enum.map(&String.to_integer/1)

    socket =
      socket
      |> assign(:container_id, @container_id)
      |> assign(:page, page_start)
      |> assign(:page_start, page_start)
      |> assign(:page_end, page_end)
      |> assign(:per_page, @per_page)
      |> paginate_posts(page_start)

    {:noreply, socket}
  end

  def handle_event("next-page", _params, socket) do
    {:noreply, paginate_posts(socket, socket.assigns.page + 1)}
  end

  def handle_event("prev-page", %{"_overran" => true}, socket) do
    {:noreply, paginate_posts(socket, :reset)}
  end

  def handle_event("prev-page", _, socket) do
    if socket.assigns.page > 1 do
      {:noreply, paginate_posts(socket, socket.assigns.page - 1)}
    else
      {:noreply, socket}
    end
  end

  defp paginate_posts(socket, :reset) do
    # We reset the stream, to clear all entries because of the limit property
    %{per_page: per_page} = socket.assigns
    page = 1

    posts = list_posts(offset: 0, limit: per_page)

    socket
    |> assign(end_of_timeline?: false)
    |> assign(page: page, page_start: nil, page_end: nil)
    |> stream(:posts, posts, reset: true)
  end

  defp paginate_posts(socket, new_page) when new_page >= 1 do
    %{per_page: per_page, page: cur_page} = socket.assigns

    posts = list_posts(offset: (new_page - 1) * per_page, limit: get_limit(socket.assigns))

    {posts, at, limit} =
      if new_page >= cur_page do
        {posts, -1, per_page * 3 * -1}
      else
        {Enum.reverse(posts), 0, per_page * 3}
      end

    case posts do
      [] ->
        socket
        |> assign(end_of_timeline?: at == -1)
        |> assign(page_start: nil, page_end: nil)
        |> stream(:posts, [])

      [_ | _] ->
        socket
        |> assign(end_of_timeline?: if(posts == [], do: at == -1, else: false))
        |> assign(end_of_timeline?: false)
        |> assign(page_start: nil, page_end: nil)
        |> assign(page: new_page)
        |> stream(:posts, posts, at: at, limit: limit)
    end
  end

  defp get_limit(%{page_start: nil, page_end: nil, per_page: per_page}), do: per_page

  defp get_limit(%{page_start: page_start, page_end: page_end, per_page: per_page}),
    do: (page_end - page_start + 1) * per_page

  defp list_posts(opts) do
    offset = opts[:offset] || 0
    limit = opts[:limit] || @per_page

    @posts
    |> Enum.slice(offset, limit)
  end

  attr(:id, :string, required: true)
  attr(:product, :map, required: true)

  @spec product_card(assigns :: map()) :: Rendered.t()
  def product_card(%{product: %{price: price, tax: tax}} = assigns) do
    assigns = assign(assigns, :total_price, price + tax)

    ~H"""
    <div id={@id}>
      <div class="relative divide-y border">
        <.link navigate={~p"/#{@product.id}"} class="group/product">
          <div class="overflow-hidden">
            <img
              src="https://ucarecdn.com/59bb7a75-8065-4b6b-af93-80ce21648cfc/-/format/auto/-/quality/smart/-/scale_crop/380x380/smart_objects_faces_points/center/"
              alt=""
              class="x-image aspect-square w-full object-cover transition-transform group-hover/product:scale-[1.2]"
            />
          </div>
          <div class=" bg-black text-white pointer-events-none absolute top-4 right-0 px-4 py-1 text-center sm:text-sm ">
            <%= dgettext("product_card", "Sold!") %>
          </div>
        </.link>
        <div class="bg-white w-full px-4 py-2 text-left">
          <p class="text-xl font-bold text-slate-900">
            <%= @product.price %>
          </p>
          <button
            type="button"
            class="text-caption-2 text-slate-500 inline-flex items-center gap-px hover:underline"
          >
            <%= "#{@total_price} Incl." %> â˜‘ï¸Ž
          </button>
        </div>
      </div>
    </div>
    """
  end
end
